AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  S3Bucket:
    Type: "String"
    NoEcho: true
  Stage:
    Type: "String"
    AllowedValues:
      - dev
      - prod
  ApiUrl:
    Type: "String"
    AllowedValues:
      - api.dev.forcepu.sh
      - api.forcepu.sh
  CertArn:
    Type: "String"
    NoEcho: true
  HostedZoneId:
    Type: "String"
    NoEcho: true
  UserPoolArn:
    Type: "String"
    NoEcho: true
  DBUsername:
    NoEcho: true
    Description: Username for PostgreSQL database access
    Type: "String"
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: true
    Description: Password for PostgreSQL database access
    Type: "String"
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

Globals:
  Function:
    Timeout: 30
    MemorySize: 4096

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Domain:
        DomainName: !Ref ApiUrl
        CertificateArn: !Ref CertArn
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref HostedZoneId
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Ref UserPoolArn
  ProtectedFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Events:
        Protected:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /protected
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /protected
            Method: options
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./protected
      DockerTag: python3.8-v1
  ExerciseLogFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Events:
        ExerciseLog:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /exercise_log
            Method: get
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./gym
      DockerTag: python3.8-v1
  PreviewFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/data/api/*"
      PackageType: Image
      ImageConfig:
        Command: ["app.get_preview"]
      Events:
        Inference:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /preview
            Method: get
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./home
      DockerTag: python3.8-v1
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBClusterIdentifier: !Sub "${Stage}-forcepush"
      DatabaseName: "api"
      Engine: aurora-postgresql
      EngineVersion: "10.18"
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 16
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true
      BackupRetentionPeriod: 35
